import os
import sys
import shutil
from pathlib import Path
import ctypes
import subprocess
import tempfile

def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except AttributeError:
        return False

def find_project_folders(path):
    for root, dirs, files in os.walk(path):
        if "node_modules" in dirs or not any(name.endswith("_node_modules") for name in dirs):
            yield Path(root)

def move_and_symlink(src, dest):
    if not dest.exists():
        dest.mkdir(parents=True, exist_ok=True)

    original_parent = src.parent
    new_parent = dest / original_parent.name
    moved_folder = new_parent / "node_modules"

    if not new_parent.exists():
        new_parent.mkdir()

    shutil.move(src, moved_folder)
    symlink_name = f"{original_parent.name}_{original_parent.parts[-1]}_node_modules"
    (original_parent / symlink_name).symlink_to(moved_folder)

def create_missing_symlinks(folder, dest):
    original_parent = folder
    symlink_name = f"{original_parent.name}_{original_parent.parts[-1]}_node_modules"
    symlink_path = original_parent / symlink_name
    if not symlink_path.exists():
        target = dest / original_parent.name / "node_modules"
        if target.exists():
            symlink_path.symlink_to(target)

if __name__ == "__main__":
    if not is_admin():
        script = os.path.abspath(sys.argv[0])
        params = f'"{script}"'
        log_file = tempfile.NamedTemporaryFile(delete=False)
        log_file.close()
        subprocess.call(f'powershell -Command "Start-Process python -Verb runAs -ArgumentList {params} -RedirectStandardOutput {log_file.name}"', shell=True)
        with open(log_file.name, "r") as f:
            print(f.read())
        os.unlink(log_file.name)
        sys.exit(0)

    start_path = Path.cwd()
    target_folder = Path("C:/SL_NODE_MODULES")

    for folder in find_project_folders(start_path):
        print(f"\nProcessing project folder: {folder}")
        node_modules_path = folder / "node_modules"
        if node_modules_path.exists():
            print(f"Moving and symlinking {node_modules_path}")
            move_and_symlink(node_modules_path, target_folder)
        else:
            print(f"Checking for missing symlink in {folder}")
            create_missing_symlinks(folder, target_folder)

    print("\nFinished processing all project folders.")
